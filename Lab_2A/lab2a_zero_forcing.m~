clear all
load('2User2AntennaBS.mat');
%% Make vectors.
[y1, y2] = take_real(y1, y2);

%% Account for any delay.
[d1, lags1, cor1] = find_delay(y1, x1);
[d2, lags2, cor2] = find_delay(y2, x2);

% delay the signals
y1 = y1(d1:end);
y2 = y2(d2:end);

%% Plotting the correlation.
% figure(1)
% plot(lags1, cor1);
% title("Cross Correlation At Different Lags for Tx1 Signal")
% xlabel("Lags (Bits)")
% ylabel("Cross Correlation")
% 
% figure(2)
% plot(lags2, cor2);
% title("Cross Correlation At Different Lags for Tx2 Signal")
% xlabel("Lags (Bits)")
% ylabel("Cross Correlation")

%% Creating matrices.
x = [x1'; x2'];
y = [y1'; y2'];
%% Estimate the channel response.
H = estimate_channel_response(x1, x2, y1, y2, pulseWidth);

%% Calculate the weight vectors.
% we know that H* x w = [1; 0] for x1
w1 = H' \ [1; 0];

% we know that H* x w = [0; 1] for x2
w2 = H' \ [0; 1];

%% Apply the weight vectors.
x1_hat = w1' * y;
x2_hat = w2' * y;

%% Downsample the sent data.
starting_down = ceil(pulseWidth/2) + 1;
x1 = x1(starting_down:pulseWidth:end)';
x2 = x2(starting_down:pulseWidth:end)';

%% Take the windowed average of received data
% sampled = x1_hat(1:40:end);
% hold on
% stem(sampled(100:200))
% stem(x1_hat(4000:8000))
% hold off
% crop_received = 40*1781;
% x1_hat = sign(round(x1_hat));
% x1_hat_reshaped = reshape(x1_hat(1:crop_received), [], pulseWidth);
% x1_hat_mean = mean(x1_hat_reshaped, 2) / pulseWidth;
% x1_hat_final = sign(x1_hat_mean))';
% x1_hat_final = sign(round(x1_hat_mean))';

x2_hat = sign(round(x2_hat));
x2_hat_reshaped = reshape(x2_hat(1:crop_received), [], pulseWidth);
x2_hat_mean = mean(x2_hat_reshaped, 2) / pulseWidth;
x2_hat_final = sign(round(x2_hat_mean))';


% x2_hat = sign(round(x2_hat));
% x2_hat = x2_hat(starting_down:pulseWidth:end);
% 
%% Calculate the error.
stem(x1(100:200))
% stem(x1_hat_final(100:200))

% error_tx1 = calculate_error(x1_hat_final, x1);
% error_tx2 = calculate_error(x2_hat_final, x2);